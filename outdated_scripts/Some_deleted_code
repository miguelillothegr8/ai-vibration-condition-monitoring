Things I changed
----------------------------------------------------
1. deleted most op the print statements
2. In cnn_architecture:
   - numChannels --> num_channels
   - All classes start with a capital now
   - removed redundant parentheses at "kernel_size=4"
   - after name == main, x --> x1 (to avoid global variable error)
   - got rid of a lot of enters and put in a lot of enters
3. In cnn_freqtraining:
   - deleted: #from outdated_scripts.cnn_architecture2 import LeNet


ppfuncs_2
----------------------------------------------------
if __name__ == '__main__':
    pass
    # test your functions here
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    sensor_data_damaged = extract_data_2("data/Damaged/D", '2', 9, device=device)
    sensor_data_healthy = extract_data_2("data/Healthy/H", '2', 9, device=device)
    sensor_samples_damaged = create_samples(sensor_data_damaged, 10, 4096, device=device)
    sensor_samples_healthy = create_samples(sensor_data_healthy, 10, 4096, device=device)
    spectrogram = spectrogram_2(sensor_samples_damaged[0])
    print(spectrogram.shape)
    # visualize_compare(sensor_samples_healthy, sensor_samples_damaged, 5)


ppfuncs_3
-----------------------------------------------------
if __name__ == '__main__':
    #Execute code on cuda
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    print("Code will be executed on:", device)

    # Extracting data
    sensor_data_damaged = extract_data_2("data/Damaged/D", '2', 4, device=device)
    sensor_data_healthy = extract_data_2("data/Healthy/H", '2', 4, device=device)

    sensor_samples_damaged = create_samples(sensor_data_damaged, 1, 40000, device=device)
    sensor_samples_healthy = create_samples(sensor_data_healthy, 1, 40000, device=device)

    #print(sensor_samples_healthy.size())
    #Create amplitude_frequency_images
    Damaged_images = amplitude_frequency_plotting(sensor_samples_damaged)
    Healthy_images = amplitude_frequency_plotting(sensor_samples_healthy)

    #Visualize
    visualize(Damaged_images)

    print(Damaged_images)